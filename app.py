from urllib.error import URLError
import telebot
from telebot import types
import datetime
import csv
import io
import urllib.request
import git


# —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç - test, –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç - main
token = '8186343979:AAFMghLrH2fQcyj-ic_GtZX0vNk9m7lDQ_o'
bot = telebot.TeleBot(token)

admin_id = 641336894
fortochka = '–§–æ—Ä—Ç–æ—á–∫–∞ üï∫'

def getSubject(day, para, group):
    # –∞–¥—Ä–µ—Å —Ç–∞–±–ª–∏—Ü—ã (–±–µ–∑ –ª–∏—Å—Ç–∞)
    url = 'https://docs.google.com/spreadsheets/d/1mzweiyFR-_rer_T812R74phF-BqbH-ygkdhNRsNtTCU/export?format=csv'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∞–¥—Ä–µ—Å—É –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∞
    if git.gitstr != '':
        url += git.gitstr

    # –ø–æ–ª—É—á–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –≤ –ª–∏—Å—Ç rows
    rows = []
    response = urllib.request.urlopen(url)
    with io.TextIOWrapper(response, encoding='utf-8') as f:
        reader = csv.reader(f)
        for row in reader:
            rows.append(row)
            #print(row)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    subject_type = ''
    subject_name = ''
    room = ''
    teacher = ''

    input_day_key = 0  # –ü–æ–∑–∏—Ü–∏—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    input_para_key = 0  # –ü–æ–∑–∏—Ü–∏—è –Ω—É–∂–Ω–æ–π –ø–∞—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
    founded_type = False  # –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞

    # –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å —Ç—Ä–µ–±—É–µ–º—ã–º
    wday = {"–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö": 0, "–í–¢–û–†–ù–ò–ö": 1, "–°–†–ï–î–ê": 2, "–ß–ï–¢–í–ï–†–ì": 3, "–ü–Ø–¢–ù–ò–¶–ê": 4, "–°–£–ë–ë–û–¢–ê": 5}

    # –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    for i in range(1, len(rows) - 1):
        if rows[i][0] in wday and wday[rows[i][0]] == day:
            input_day_key = i




    # –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –Ω—É–∂–Ω–æ–π –ø–∞—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è
    for i in range(input_day_key, len(rows)):
        buffer = rows[i][2]
        buffer = buffer.split('\n')
        if len(buffer) == 2:
            if buffer[0] == str(para):
                input_para_key = i
                break
    print("BUF: ", buffer)

    is_cell_empty = False  # –ø—É—Å—Ç–∞—è –ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    groups = {3: 7, 4: 9}  # –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞, –æ—Ç–Ω–æ—Å—è—â–µ–≥–æ—Å—è –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
    par_times = {1: '8:15 - 9:50', 2: '10:00 - 11:35', 3: '11:45 - 13:20', 4: '14:00 - 15:35',
                 5: '15:45 - 17:20', 6: '17:30 - 19:05', 7: '19:25 - 21:00'}  # –Ω–æ–º–µ—Ä –ø–∞—Ä—ã: –≤—Ä–µ–º—è

    group_ind = groups[group]  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
    subject = rows[input_para_key][group_ind]  # –∫–ª–µ—Ç–∫–∞ –Ω—É–∂–Ω–æ–π –ø–∞—Ä—ã

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä—Ç–æ—á–∫—É –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –ø–∞—Ä—É
    if subject == '':
        is_cell_empty = True
        subjectOtherGroup = rows[input_para_key][groups[3]]
        print("!!!!: ", subjectOtherGroup)
        if subjectOtherGroup == '':
            subjectPI = rows[input_para_key][3]
            buffer = subjectPI.split('\n')
            subjectPI = buffer[0]
            if subjectPI == '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞':
                return {'name': '–§–∏–∑-—Ä–∞', 'type': '–ü–ó', 'room': '–ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 31',
                        'teacher': '–ö—Å–µ–Ω–∏—è-–ö—Å–µ–Ω–∏—è –∏ –°–µ—Ä–≥–µ–π-–°–µ—Ä–≥–µ–π', 'time': par_times[para]}
            else:
                return {'name': fortochka, 'type': '-', 'room': '-', 'teacher': '-', 'time': par_times[para]}
        else:
            subject_type = '–õ–ö'
            founded_type = True
            subject = subjectOtherGroup

    # —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    #print(subject)
    buffer_list = subject.split('\n')  # –°–ø–∏—Å–æ–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    buffer = buffer_list[0]  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    teacher = buffer_list[1]  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    if buffer[-1:] == ' ':
        buffer = buffer[:-1]


    # –∏—â–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
    for i in range(len(buffer) - 1):
        if buffer[i] + buffer[i + 1] == "–õ–ö":
            founded_type = True
            subject_type = "–õ–ö"
        if buffer[i] + buffer[i + 1] == "–ü–ó":
            founded_type = True
            subject_type = "–ü–ó"
        if founded_type:
            subject_name = buffer[:i] + buffer[i + 2:]
            break

    # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∏–ø–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ —Å–ø–µ—Ü–∫—É—Ä—Å
    if not founded_type:
        subject_type = '–∫–∞–∫–∞—è-—Ç–æ –ø–∞—Ä–∞\n'
        subject_name = buffer
    # –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –∏ –Ω–µ –ª–µ–∫—Ü–∏—è, —Ç–æ —ç—Ç–æ —Ñ–æ—Ä—Ç–æ—á–∫–∞
    print('subject_type: ', subject_type)
    if is_cell_empty and subject_type != '–õ–ö':
        print("–§–û–†–¢–û–ß–ö–ê –°–†–ê–ë–û–¢–ê–õ–ê –¢–£–¢–¨")

        return {'name': fortochka, 'type': '-', 'room': '-', 'teacher': '-', 'time': par_times[para]}

    if subject_type != '–õ–ö':
        room = rows[input_para_key][group_ind + 1]
    else:
        room = rows[input_para_key][groups[4] + 1]

    return {'name': subject_name, 'type': subject_type, 'room': room, 'teacher': teacher, 'time': par_times[para]}


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    group_3 = types.KeyboardButton("/3")
    group_4 = types.KeyboardButton("/4")
    markup.add(group_3, group_4)
    bot.send_message(message.chat.id,
                     text="–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n(—Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã: 3, 4)".format(
                         message.from_user), reply_markup=markup)


@bot.message_handler(commands=['3', '4'])
def set_group_three(message):
    global set_group
    set_group = int(message.text[1])
    bot.send_message(message.chat.id, text="–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " + str(set_group) + "!")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    today = types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è")
    monday = types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
    tuesday = types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
    wendsday = types.KeyboardButton("–°—Ä–µ–¥–∞")
    thursdya = types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
    friday = types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
    saturday = types.KeyboardButton("–°—É–±–±–æ—Ç–∞")
    change_group = types.KeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
    tomorrow = types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞")
    markup.add(today, tomorrow, monday, tuesday, wendsday, thursdya, friday, saturday, change_group)
    bot.send_message(message.chat.id,
                     text="–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å".format(
                         message.from_user), reply_markup=markup)


def adminfunc(git_code, message):
    git_buffer = '&gid=' + git_code
    buffer = 'https://docs.google.com/spreadsheets/d/1lmSfZIINVP3gnuDD1KppiGMlrJYpwLi0znT3Oh_Y9IQ/export?format=csv' + git_buffer
    try:
        urllib.request.urlopen(buffer)
    except urllib.error.HTTPError:
        bot.send_message(message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π git –ª–∏—Å—Ç–∞!")
        return
    git.gitstr = git_buffer


@bot.message_handler(content_types=['text'])
def func(message):
    weekdays = {0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞"}
    global set_group
    try:
        print(set_group)
    except NameError:
        set_group = 4
    current_weekday = datetime.datetime.now().weekday()
    messages = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
                "–í—Ç–æ—Ä–Ω–∏–∫": 1,
                "–°—Ä–µ–¥–∞": 2,
                "–ß–µ—Ç–≤–µ—Ä–≥": 3,
                "–ü—è—Ç–Ω–∏—Ü–∞": 4,
                "–°—É–±–±–æ—Ç–∞": 5,
                "–°–µ–≥–æ–¥–Ω—è": current_weekday,
                "–ó–∞–≤—Ç—Ä–∞": current_weekday + 1, }
    if current_weekday == 6:
        messages["–ó–∞–≤—Ç—Ä–∞"] = 0
    if message.text in messages:
        today_number = messages[message.text]
    else:
        if message.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
            start_message(message)
            return
        else:
            if message.chat.id == admin_id:
                adminfunc(message.text, message)
                return
            else:
                bot.send_message(message.chat.id, text="–§–∏–≥–Ω—è –∫–∞–∫–∞—è-—Ç–æ")
                return
    if today_number == 6:
        bot.send_message(message.chat.id, text="–í–û–°–ö–†–ï–°–ï–ù–¨–ï, –ß–ò–õ–õ–¨!")
    else:
        amount_pars = 6
        # if today_number == 0 or amount_pars == 5:
        #     amount_pars = 4
        bot.send_message(message.chat.id,
                         text="–í–æ—Ç —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ " + weekdays[today_number] + "!" + "\n(–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: " + str(
                             set_group) + ")", parse_mode='HTML')
        output_message = []
        for i in range(amount_pars + 1):
            i_subject = getSubject(today_number, i + 1, set_group)
            print(i_subject)
            name = i_subject['name']
            stype = ''
            teacher = ''
            time = ''
            room = ''
            if name != fortochka:
                name += "\n"
                stype = i_subject['type']
                if stype == "–ü–ó":
                    stype = "–ü—Ä–∞–∫—Ç–æ—Å–∏–∫\n"
                elif stype == "–õ–ö":
                    stype = "–õ–µ–∫—Ç–æ—Å–∏–∫\n"
                teacher = i_subject['teacher'] + "\n"
                time = i_subject['time']
                room = "–ê—É–¥–∏—Ç–æ—Ä–∏—è " + i_subject['room'] + '\n'
            buffer_list = [str(i + 1) + "-—è –ø–∞—Ä–∞:\n", stype, name, teacher, room, time, "\n", "\n"]
            output_message.append(buffer_list)
        for i in reversed(range(len(output_message))):
            if output_message[i][2] == fortochka:
                output_message[i] = ''
            else:
                break
        buffer_str = ""
        for el in output_message:
            for word in el:
                buffer_str += word
        bot.send_message(message.chat.id, text=buffer_str, parse_mode='HTML')


bot.polling(non_stop=True, interval=0)  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞